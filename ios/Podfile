 def node_require(script)
   # Resolve script with node to allow for hoisting
   require Pod::Executable.execute_command('node', ['-p',
    "require.resolve(
       '#{script}',
       {paths: [process.argv[1]]},
    )", __dir__]).strip
 end


 node_require('react-native/scripts/react_native_pods.rb')
 node_require('react-native-permissions/scripts/setup.rb')
platform :ios, min_ios_version_supported
prepare_react_native_project!
setup_permissions([
  # 'AppTrackingTransparency',
  # 'BluetoothPeripheral',
  # 'Calendars',
    'Camera',
  # 'Contacts',
  # 'FaceID',
  # 'LocationAccuracy',
  # 'LocationAlways',
  'LocationWhenInUse',
  # 'MediaLibrary',
  # 'Microphone',
  # 'Motion',
    'Notifications',
    'PhotoLibrary',
  # 'PhotoLibraryAddOnly',
  # 'Reminders',
  # 'Siri',
  # 'SpeechRecognition',
  # 'StoreKit',
])

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'FitGo' do
  config = use_native_modules!
  use_modular_headers!
  $RNFirebaseAsStaticFramework = true
    pod 'Firebase', :modular_headers => true
    pod 'FirebaseCoreInternal', :modular_headers => true
    pod 'GoogleUtilities', :modular_headers => true
    pod 'RNIap', :path => '../node_modules/react-native-iap'
    pod 'Google-Mobile-Ads-SDK'
    pod 'react-native-in-app-review', :path => '../node_modules/react-native-in-app-review'
  pod 'RNFBAnalytics', :path => '../node_modules/@react-native-firebase/analytics'


  use_react_native!(
    :path => config[:reactNativePath],
    # :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'FitGoTests' do
    inherit! :complete
    # Pods for testing
    
  end

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )
  end
end


